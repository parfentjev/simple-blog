// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// PageDto defines model for PageDto.
type PageDto struct {
	// Items Page items
	Items []interface{} `json:"items"`

	// Page Current page
	Page int64 `json:"page"`

	// TotalPages Total pages
	TotalPages int64 `json:"totalPages"`
}

// PagePostDto defines model for PagePostDto.
type PagePostDto struct {
	Items []PostPreviewDto `json:"items"`

	// Page Current page
	Page int64 `json:"page"`

	// TotalPages Total pages
	TotalPages int64 `json:"totalPages"`
}

// PostDto defines model for PostDto.
type PostDto struct {
	Date    string `json:"date"`
	Id      string `json:"id"`
	Summary string `json:"summary"`
	Text    string `json:"text"`
	Title   string `json:"title"`
	Visible bool   `json:"visible"`
}

// PostEditorDto defines model for PostEditorDto.
type PostEditorDto struct {
	Date    *string `json:"date,omitempty"`
	Id      *string `json:"id,omitempty"`
	Summary string  `json:"summary"`
	Text    string  `json:"text"`
	Title   string  `json:"title"`
	Visible bool    `json:"visible"`
}

// PostPreviewDto defines model for PostPreviewDto.
type PostPreviewDto struct {
	Date    string `json:"date"`
	Id      string `json:"id"`
	Summary string `json:"summary"`
	Title   string `json:"title"`
	Visible bool   `json:"visible"`
}

// UserTokenDto defines model for UserTokenDto.
type UserTokenDto struct {
	Expires int    `json:"expires"`
	Token   string `json:"token"`
}

// GetPostsEditorParams defines parameters for GetPostsEditor.
type GetPostsEditorParams struct {
	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`
}

// GetPostsPublishedParams defines parameters for GetPostsPublished.
type GetPostsPublishedParams struct {
	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty"`
}

// PostUsersJSONBody defines parameters for PostUsers.
type PostUsersJSONBody struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// PostUsersTokenJSONBody defines parameters for PostUsersToken.
type PostUsersTokenJSONBody struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// PostPostsEditorJSONRequestBody defines body for PostPostsEditor for application/json ContentType.
type PostPostsEditorJSONRequestBody = PostEditorDto

// PutPostsEditorIdJSONRequestBody defines body for PutPostsEditorId for application/json ContentType.
type PutPostsEditorIdJSONRequestBody = PostEditorDto

// PostUsersJSONRequestBody defines body for PostUsers for application/json ContentType.
type PostUsersJSONRequestBody PostUsersJSONBody

// PostUsersTokenJSONRequestBody defines body for PostUsersToken for application/json ContentType.
type PostUsersTokenJSONRequestBody PostUsersTokenJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /posts/editor)
	GetPostsEditor(c *gin.Context, params GetPostsEditorParams)

	// (POST /posts/editor)
	PostPostsEditor(c *gin.Context)

	// (DELETE /posts/editor/{id})
	DeletePostsEditorId(c *gin.Context, id string)

	// (GET /posts/editor/{id})
	GetPostsEditorId(c *gin.Context, id string)

	// (PUT /posts/editor/{id})
	PutPostsEditorId(c *gin.Context, id string)

	// (GET /posts/published)
	GetPostsPublished(c *gin.Context, params GetPostsPublishedParams)

	// (GET /posts/published/{id})
	GetPostsPublishedId(c *gin.Context, id string)

	// (GET /rss/posts)
	GetRssPosts(c *gin.Context)

	// (POST /users)
	PostUsers(c *gin.Context)

	// (POST /users/token)
	PostUsersToken(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetPostsEditor operation middleware
func (siw *ServerInterfaceWrapper) GetPostsEditor(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPostsEditorParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPostsEditor(c, params)
}

// PostPostsEditor operation middleware
func (siw *ServerInterfaceWrapper) PostPostsEditor(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostPostsEditor(c)
}

// DeletePostsEditorId operation middleware
func (siw *ServerInterfaceWrapper) DeletePostsEditorId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeletePostsEditorId(c, id)
}

// GetPostsEditorId operation middleware
func (siw *ServerInterfaceWrapper) GetPostsEditorId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPostsEditorId(c, id)
}

// PutPostsEditorId operation middleware
func (siw *ServerInterfaceWrapper) PutPostsEditorId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutPostsEditorId(c, id)
}

// GetPostsPublished operation middleware
func (siw *ServerInterfaceWrapper) GetPostsPublished(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetPostsPublishedParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPostsPublished(c, params)
}

// GetPostsPublishedId operation middleware
func (siw *ServerInterfaceWrapper) GetPostsPublishedId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetPostsPublishedId(c, id)
}

// GetRssPosts operation middleware
func (siw *ServerInterfaceWrapper) GetRssPosts(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetRssPosts(c)
}

// PostUsers operation middleware
func (siw *ServerInterfaceWrapper) PostUsers(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostUsers(c)
}

// PostUsersToken operation middleware
func (siw *ServerInterfaceWrapper) PostUsersToken(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostUsersToken(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/posts/editor", wrapper.GetPostsEditor)
	router.POST(options.BaseURL+"/posts/editor", wrapper.PostPostsEditor)
	router.DELETE(options.BaseURL+"/posts/editor/:id", wrapper.DeletePostsEditorId)
	router.GET(options.BaseURL+"/posts/editor/:id", wrapper.GetPostsEditorId)
	router.PUT(options.BaseURL+"/posts/editor/:id", wrapper.PutPostsEditorId)
	router.GET(options.BaseURL+"/posts/published", wrapper.GetPostsPublished)
	router.GET(options.BaseURL+"/posts/published/:id", wrapper.GetPostsPublishedId)
	router.GET(options.BaseURL+"/rss/posts", wrapper.GetRssPosts)
	router.POST(options.BaseURL+"/users", wrapper.PostUsers)
	router.POST(options.BaseURL+"/users/token", wrapper.PostUsersToken)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RYTXPbNhD9Kxi0Mz2UY8mN24NuddNm3B6i8cf04PEBFFcSEhJgFkvLqob/vYMFRYoW",
	"ZCn+aJ3kZBpYLnbfw3sAtZITW5TWgCEnRyvpJnMoFD+O1QzekvWPJdoSkDTwhCYo+CEDN0FdkrZGjjhe",
	"hLmkjakTScsS5EgqRLWUdSJLNYPtt3+rEMGQ4NlETi0WiuRIakO/nMg2izYEM0Cfhyyp3C8aqeXSz3Eu",
	"d0iyOpEInyqNkMnRtWxq2Fhg3dBNnXCfY+uowUbl+fupHF2v5PcIUzmS3w06SAcNnoM1mHWyE8324cE8",
	"1tEY4VbDIqS7B283YNMPMCFZc8lduf3FM0XMRfOOI9Rm5rPqLDrsqqJQuIzOEdxRfEJTHl/lVjud9uZS",
	"a3NQZosSncl1oq6KZs0ktNGlu9kCIUDwe6bJ4pcNxE4M9jW/sWtetvuXY/sAmq8c4KX9CCbaJ9yVGsNj",
	"zE8+gokUfp8ADkvaXNtVeIBgUqGm5YWXbVgwBYWAv1Y07/77Y21Mf/596TvlaI8Lz3ZGNScqZe0TazPl",
	"vhqU5YUuyhzEaW5nHhlAFwzw+OjY92RLMKrUciTfHA2PhtK7L825nkFpHbkBsCb8wAxo20jfAQmV54KD",
	"E5FamouySnPt5pAJZTKRoZqSd0gPtPKvnWXhRb/rXNAcL4yqAAJ0bJaRs8NURcpdaz/0qQIm3SiGpPHk",
	"4IMxAusbz5MrrXEB8J+GQ/9nYg2B4dZUWeZ6wjUOPjhrugNvr+1ueD7z0C///V8e7JPh8TaAV0ZVNLeo",
	"/4HMB/0cquoHnRkCNCoXDvAWUACixd5GYsw2t9D1jW+Y1MzDyQIPp5MnKnK6IigCoYSBBXO5xRdbRI8w",
	"v+nB0anNls+HY8+F6762CCuot0iMYPpq4K6TvowGK53VYb0cKHLLecvjQhkBd9qRNrM4GyFug4+zbK+E",
	"rCPBxsny8Trv1MPjfaQjWmodb4eUHs3CyfAkcl/0BRtLYmor859oY7fDMQuJWMyB5oBC0w9uw+Ys+jr3",
	"WNyrYOjZRPp0o3slnJdVhPOrMlOHyHBc/c8MvwoH/gq03xl1q+oHrzyd9vmtndIft9m+hQvOZ3J0AAnt",
	"gfmQNfe4EOkyKGwPId+UHb+EwmLsoXOBwYcpM+L84kJMATKx0L0Php1qOndu3Mx9BpDo3I93Rd7H8j43",
	"L7eZK8c7a3XIpdvHRi/dV5zk8Wbf/8ItlXMLi/HPdl9D2N/7PnLbyKTLGPnQfdz13XcsJgxOc0JEmDhV",
	"mWggEanHhAPfbAeew0w7CqAK7USmnUpzeMqWD5RscDxofxuIM/0OjKfVc+3jxfo3gh1sXzbTXynlz2d9",
	"vV9zIkrmuUdtpafujG5stT4ywlydtAPBKuqb+t8AAAD///wNWyVlFwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
