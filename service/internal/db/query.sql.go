// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package db

import (
	"context"
	"time"
)

const deletePost = `-- name: DeletePost :exec
delete from posts
where id = ?
`

func (q *Queries) DeletePost(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deletePost, id)
	return err
}

const insertPost = `-- name: InsertPost :exec
insert into posts(id, title, summary, text, date, visible)
values(?, ?, ?, ?, ?, ?)
`

type InsertPostParams struct {
	ID      string    `json:"id"`
	Title   string    `json:"title"`
	Summary string    `json:"summary"`
	Text    string    `json:"text"`
	Date    time.Time `json:"date"`
	Visible bool      `json:"visible"`
}

func (q *Queries) InsertPost(ctx context.Context, arg InsertPostParams) error {
	_, err := q.db.ExecContext(ctx, insertPost,
		arg.ID,
		arg.Title,
		arg.Summary,
		arg.Text,
		arg.Date,
		arg.Visible,
	)
	return err
}

const insertUser = `-- name: InsertUser :exec
insert into users(id, username, password, active)
values(?, ?, ?, ?)
`

type InsertUserParams struct {
	ID       string `json:"id"`
	Username string `json:"username"`
	Password string `json:"password"`
	Active   bool   `json:"active"`
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) error {
	_, err := q.db.ExecContext(ctx, insertUser,
		arg.ID,
		arg.Username,
		arg.Password,
		arg.Active,
	)
	return err
}

const selectPost = `-- name: SelectPost :one
select id, title, summary, text, date, visible
from posts
where id = ?
`

func (q *Queries) SelectPost(ctx context.Context, id string) (Post, error) {
	row := q.db.QueryRowContext(ctx, selectPost, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Summary,
		&i.Text,
		&i.Date,
		&i.Visible,
	)
	return i, err
}

const selectUser = `-- name: SelectUser :one
select id,
    password,
    active
from users
where username = ?
`

type SelectUserRow struct {
	ID       string `json:"id"`
	Password string `json:"password"`
	Active   bool   `json:"active"`
}

func (q *Queries) SelectUser(ctx context.Context, username string) (SelectUserRow, error) {
	row := q.db.QueryRowContext(ctx, selectUser, username)
	var i SelectUserRow
	err := row.Scan(&i.ID, &i.Password, &i.Active)
	return i, err
}

const selectVisiblePost = `-- name: SelectVisiblePost :one
select id, title, summary, text, date, visible
from posts
where id = ?
    and visible = 1
`

func (q *Queries) SelectVisiblePost(ctx context.Context, id string) (Post, error) {
	row := q.db.QueryRowContext(ctx, selectVisiblePost, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Summary,
		&i.Text,
		&i.Date,
		&i.Visible,
	)
	return i, err
}

const selectVisiblePosts = `-- name: SelectVisiblePosts :many
select id,
    title,
    summary,
    date,
    visible
from posts
where visible = 1
order by date desc
`

type SelectVisiblePostsRow struct {
	ID      string    `json:"id"`
	Title   string    `json:"title"`
	Summary string    `json:"summary"`
	Date    time.Time `json:"date"`
	Visible bool      `json:"visible"`
}

func (q *Queries) SelectVisiblePosts(ctx context.Context) ([]SelectVisiblePostsRow, error) {
	rows, err := q.db.QueryContext(ctx, selectVisiblePosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectVisiblePostsRow
	for rows.Next() {
		var i SelectVisiblePostsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Summary,
			&i.Date,
			&i.Visible,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePost = `-- name: UpdatePost :exec
update posts
set title = ?,
    summary = ?,
    text = ?,
    date = ?,
    visible = ?
where id = ?
`

type UpdatePostParams struct {
	Title   string    `json:"title"`
	Summary string    `json:"summary"`
	Text    string    `json:"text"`
	Date    time.Time `json:"date"`
	Visible bool      `json:"visible"`
	ID      string    `json:"id"`
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) error {
	_, err := q.db.ExecContext(ctx, updatePost,
		arg.Title,
		arg.Summary,
		arg.Text,
		arg.Date,
		arg.Visible,
		arg.ID,
	)
	return err
}
