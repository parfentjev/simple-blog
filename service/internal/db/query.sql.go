// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const countAllPost = `-- name: CountAllPost :one
select count(*) from public.post
`

func (q *Queries) CountAllPost(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countAllPost)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countPublishedPost = `-- name: CountPublishedPost :one
select count(*) from public.post
where visible = true
`

func (q *Queries) CountPublishedPost(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countPublishedPost)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deletePost = `-- name: DeletePost :exec
delete from public.post
where id = $1
`

func (q *Queries) DeletePost(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deletePost, id)
	return err
}

const insertPost = `-- name: InsertPost :exec
insert into public.post(title, summary, text, date, visible)
values($1, $2, $3, $4, $5)
`

type InsertPostParams struct {
	Title   sql.NullString
	Summary sql.NullString
	Text    sql.NullString
	Date    sql.NullTime
	Visible sql.NullBool
}

func (q *Queries) InsertPost(ctx context.Context, arg InsertPostParams) error {
	_, err := q.db.ExecContext(ctx, insertPost,
		arg.Title,
		arg.Summary,
		arg.Text,
		arg.Date,
		arg.Visible,
	)
	return err
}

const insertUser = `-- name: InsertUser :exec
insert into public.user(username, password)
values($1, $2)
`

type InsertUserParams struct {
	Username string
	Password string
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) error {
	_, err := q.db.ExecContext(ctx, insertUser, arg.Username, arg.Password)
	return err
}

const selectAllPosts = `-- name: SelectAllPosts :many
select id,
    title,
    summary,
    date,
    visible
from public.post
order by date desc
limit $1
offset $2
`

type SelectAllPostsParams struct {
	Limit  int64
	Offset int64
}

type SelectAllPostsRow struct {
	ID      uuid.UUID
	Title   sql.NullString
	Summary sql.NullString
	Date    sql.NullTime
	Visible sql.NullBool
}

func (q *Queries) SelectAllPosts(ctx context.Context, arg SelectAllPostsParams) ([]SelectAllPostsRow, error) {
	rows, err := q.db.QueryContext(ctx, selectAllPosts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectAllPostsRow
	for rows.Next() {
		var i SelectAllPostsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Summary,
			&i.Date,
			&i.Visible,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectPost = `-- name: SelectPost :one
select id, title, summary, text, date, visible
from public.post
where id = $1
`

func (q *Queries) SelectPost(ctx context.Context, id uuid.UUID) (Post, error) {
	row := q.db.QueryRowContext(ctx, selectPost, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Summary,
		&i.Text,
		&i.Date,
		&i.Visible,
	)
	return i, err
}

const selectUser = `-- name: SelectUser :one
select id, password
from public.user
where username = $1
and active = true
`

type SelectUserRow struct {
	ID       uuid.UUID
	Password string
}

func (q *Queries) SelectUser(ctx context.Context, username string) (SelectUserRow, error) {
	row := q.db.QueryRowContext(ctx, selectUser, username)
	var i SelectUserRow
	err := row.Scan(&i.ID, &i.Password)
	return i, err
}

const selectVisiblePost = `-- name: SelectVisiblePost :one
select id, title, summary, text, date, visible
from public.post
where id = $1
    and visible = true
`

func (q *Queries) SelectVisiblePost(ctx context.Context, id uuid.UUID) (Post, error) {
	row := q.db.QueryRowContext(ctx, selectVisiblePost, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Summary,
		&i.Text,
		&i.Date,
		&i.Visible,
	)
	return i, err
}

const selectVisiblePosts = `-- name: SelectVisiblePosts :many
select id,
    title,
    summary,
    date,
    visible
from public.post
where visible = true
order by date desc
limit $1
offset $2
`

type SelectVisiblePostsParams struct {
	Limit  int64
	Offset int64
}

type SelectVisiblePostsRow struct {
	ID      uuid.UUID
	Title   sql.NullString
	Summary sql.NullString
	Date    sql.NullTime
	Visible sql.NullBool
}

func (q *Queries) SelectVisiblePosts(ctx context.Context, arg SelectVisiblePostsParams) ([]SelectVisiblePostsRow, error) {
	rows, err := q.db.QueryContext(ctx, selectVisiblePosts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectVisiblePostsRow
	for rows.Next() {
		var i SelectVisiblePostsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Summary,
			&i.Date,
			&i.Visible,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePost = `-- name: UpdatePost :exec
update public.post
set title = $1,
    summary = $2,
    text = $3,
    date = $4,
    visible = $5
where id = $6
`

type UpdatePostParams struct {
	Title   sql.NullString
	Summary sql.NullString
	Text    sql.NullString
	Date    sql.NullTime
	Visible sql.NullBool
	ID      uuid.UUID
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) error {
	_, err := q.db.ExecContext(ctx, updatePost,
		arg.Title,
		arg.Summary,
		arg.Text,
		arg.Date,
		arg.Visible,
		arg.ID,
	)
	return err
}
